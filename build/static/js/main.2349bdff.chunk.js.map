{"version":3,"sources":["components/home.js","components/courses.js","services/scoreService.js","components/scores.js","components/links.js","App.js","index.js"],"names":["Home","className","id","Courses","props","coursesToShow","courses","filter","course","City","toLowerCase","includes","length","value","onChange","handleFilter","href","map","i","Fullname","Area","ID","baseUrl","axios","get","then","response","data","newObject","post","put","Form","courseToShow","parTotal","holes","hole","par","onSubmit","handleFormSubmit","name","newName","handleName","required","maxLength","reduce","s","p","handleScore","type","min","max","step","onClick","resetCourseToShow","Notification","message","NextClick","clickedNext","holesArray","newHoleAmount","push","handleAddNewFormSubmit","handleHolePar","resetNewCourseAdd","NewCourseForm","courseChosen","showAddNew","showFirstForm","handleNextClick","newCourseName","handleCourseName","handleHoleAmount","handleAddNew","Scores","useState","setCourses","setCourseToShow","setShowAddNew","setShowFirstForm","setclickedNext","setCourseChosen","score","setScore","setNewName","setNewCourseName","setNewHoleAmount","newCourseHoles","setNewCourseHoles","setMessage","total","useEffect","scoreService","initialCourses","resultsToShow","results","find","event","target","preventDefault","newCourseParTotal","Object","keys","parseInt","returnedCourse","concat","setTimeout","invalidInputs","isNaN","toPar","scoreArray","result","d","Date","time","getDate","getMonth","getFullYear","resultObject","changedCourse","c","Links","App","setFilter","responseData","setResponseData","to","Type","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2349bdff.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport '../App.css'\r\n\r\n\r\nconst Home = () => { // SPA:n kotisivu\r\n\r\n    return(\r\n        <div>\r\n            <header className=\"home-header\">\r\n                <h1>Welcome to Disc Golf SPA</h1>\r\n            </header>\r\n            <div className=\"home-content\">\r\n                Hello! This is the home page for the disc golf app. \r\n                Use the navigation bar above to browse the site.\r\n            </div>\r\n            <div id=\"Footer\">\r\n                <p>Site created by Hannes Pohjola</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Home;","\r\nimport React from 'react'\r\nimport '../App.css'\r\n\r\nconst Courses = (props) => {\r\n\r\n    // valitaan näytettävät radat suodattimen mukaan (...includes(props.filter))\r\n    const coursesToShow = props.courses.filter(course => course.City.toLowerCase().includes(props.filter))\r\n\r\n    // API:sta haettujen ratojen määrä on todella suuri ( > 4000), asetetaan rajat milloin ratoja näytetään\r\n    if(coursesToShow.length > 30) \r\n    {\r\n        return (\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <h1>Find disc golf courses in Finland</h1>\r\n            </header>\r\n            <div>\r\n                <p>Filter by city </p><input value={props.filter} onChange={props.handleFilter}/>\r\n            </div>\r\n            <div>\r\n                <p>Too many matches, specify another filter</p>\r\n            </div>\r\n            <div id=\"Footer\">\r\n                <p>Courses API provided by disc golf metrix</p>\r\n                <a href=\"https://discgolfmetrix.com/?u=rule&ID=37\">Metrix API</a>\r\n            </div>\r\n        </div>        \r\n        )\r\n    }\r\n    else if(coursesToShow.length <= 30 && coursesToShow.length >= 1) // <-- kun annetaan tarpeeksi hyvä suodatin, näytetään radoista, nimi, kaupunki, maakunta.\r\n    {\r\n        return (\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <h1>Find disc golf courses in Finland</h1>\r\n                </header>\r\n                <div>\r\n                    <p>Filter by city </p><input value={props.filter} onChange={props.handleFilter}/>\r\n                </div>\r\n                <div>\r\n                    {coursesToShow.map((course, i) =>\r\n                        <div key={i} id=\"courseInfo\"> \r\n                            <h3 key={course.Fullname}> {course.Fullname}</h3>\r\n                            <p key={course.ID}> {course.Area}, {course.City} </p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div id=\"Footer\">\r\n                    <p>Courses API provided by disc golf metrix</p>\r\n                    <a href=\"https://discgolfmetrix.com/?u=rule&ID=37\">Metrix API</a>\r\n                </div>\r\n            </div>  \r\n        )\r\n    }\r\n    else\r\n    {\r\n        return (\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <h1>Find disc golf courses in Finland</h1>\r\n                </header>\r\n                <div>\r\n                <p>Filter by city </p><input value={props.filter} onChange={props.handleFilter}/>\r\n                </div>\r\n                <div>\r\n                    <p>No matches found</p>\r\n                </div>\r\n                <div id=\"Footer\">\r\n                    <p>Courses API provided by disc golf metrix</p>\r\n                    <a href=\"https://discgolfmetrix.com/?u=rule&ID=37\">Metrix API</a>\r\n                </div>\r\n            </div>        \r\n            )\r\n    }\r\n\r\n}\r\n\r\nexport default Courses;","import axios from 'axios'\r\nconst baseUrl = '/api/courses'  // Backend on internetissä herokun kautta\r\n\r\nconst getAll = () => { // funktio ratatulosten hakemista varten\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => { // funktio uuden ratatuloksen lähettämiseen\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\nexport default { getAll, create, update }\r\n\r\n\r\n","\r\nimport React from 'react';\r\nimport '../App.css'\r\nimport { useState, useEffect } from 'react';\r\nimport scoreService from '../services/scoreService'\r\n\r\nconst Form = (props) => {\r\n\r\n\r\n\r\n    if(props.courseToShow.length === 0)\r\n    {\r\n        return null // ei renderöidä lomaketta, ellei rataa, jonka tulokset halutaan tallentaa, ole valittu.\r\n    }\r\n    else\r\n    {\r\n        const parTotal = props.courseToShow.holes.map(hole => hole.par) \r\n\r\n        //luodaan lomake, ja sen sisälle taulukko\r\n        // Luodaan taulukkoon kenttiä sen mukaan, kuinka monta väylää radassa on.\r\n        // {props.courseToShow.holes.map(hole =>  <th key={hole.id}> {hole.id} </th> )}\r\n        return(\r\n            <div className=\"scoreDiv\">\r\n                <form onSubmit={props.handleFormSubmit}>\r\n                <h3> {props.courseToShow.name} </h3>\r\n                    Your name: <input value={props.newName} onChange={props.handleName} required maxLength=\"30\"/>\r\n                        <div className=\"scoreForm\">\r\n                        <table className=\"scoreTable\">\r\n                            <tbody>\r\n                            <tr><th id=\"row-header\">Hole</th>\r\n                                {props.courseToShow.holes.map(hole =>  \r\n                                    <th key={hole.id}> {hole.id} </th>\r\n                                )}\r\n                                <th id=\"row-header\">Total</th>\r\n                            </tr>\r\n                            <tr><td id=\"row-header\">Par</td>\r\n                                {props.courseToShow.holes.map(hole =>  \r\n                                    <td key={hole.id}> {hole.par} </td>\r\n                                )}\r\n                                <td id=\"row-header\"> {parTotal.reduce((s, p) => s + p)} </td> \r\n                            </tr>\r\n                            <tr><td id=\"row-header\">Result</td>\r\n                                {props.courseToShow.holes.map((hole, i) =>  \r\n                                    <td key={hole.id}> <input id=\"resultInput\" name={i} onChange={props.handleScore} type=\"number\" min=\"1\" max=\"100\" step=\"1\" required/> </td>\r\n                                )}\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        </div>\r\n                    <button className=\"saveButton\" type=\"submit\">Save</button>\r\n                    <button className=\"saveButton\" onClick={props.resetCourseToShow} >Cancel</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Komponentti ilmoitusten näyttämistä varten käyttäjälle. Ei renderöidä mitään, jos näytettävää viestiä ei ole.\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className=\"message\">\r\n          {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst NextClick = (props) => {\r\n    \r\n\r\n    if(!props.clickedNext) {\r\n        return null\r\n    }\r\n\r\n    let holesArray = []\r\n    for(let i = 0; i < props.newHoleAmount; i++)\r\n    {\r\n        holesArray.push({\r\n            id: i + 1,\r\n            par: 0\r\n        }) \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleAddNewFormSubmit}>\r\n            <div className=\"scoreOverflow\">\r\n                <table className=\"scoreTable\">\r\n                <tbody>\r\n                    <tr><th id=\"row-header\">Hole</th>\r\n                        {holesArray.map(hole =>  \r\n                        <th key={hole.id}> {hole.id} </th>\r\n                        )}\r\n                    </tr>\r\n                    <tr><td id=\"row-header\">Par: </td>\r\n                        {holesArray.map((hole, i) =>  \r\n                        <td key={hole.id}> <input id=\"parInput\" name={i} onChange={props.handleHolePar} type=\"number\" min=\"1\" max=\"5\" step=\"1\" required/> </td>\r\n                        )}\r\n                    </tr>\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n            <button className=\"saveButton\" type=\"submit\">Save</button>\r\n            <button className=\"saveButton\" onClick={props.resetNewCourseAdd} >Cancel</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst NewCourseForm = (props) => {\r\n\r\n    if(props.courseChosen) {\r\n        return null\r\n    }\r\n\r\n    if(!props.showAddNew) {\r\n        return (\r\n            <>\r\n                <h3> Can't find the course/layout you're looking for? Add a new course! </h3>\r\n                <button className=\"addButton\" onClick={props.handleAddNew} >Add new</button>\r\n            </>\r\n        )\r\n    }\r\n    if(!props.showFirstForm) {\r\n        return (\r\n            <div className=\"addCourse\">\r\n                <h3>Please give par values for {props.newCourseName}</h3>\r\n                <NextClick clickedNext={props.clickedNext} handleAddNew={props.handleAddNew} newHoleAmount={props.newHoleAmount} \r\n                handleHolePar={props.handleHolePar} handleAddNewFormSubmit={props.handleAddNewFormSubmit} resetNewCourseAdd={props.resetNewCourseAdd} />\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"addCourse\">\r\n            <form onSubmit={props.handleNextClick}>\r\n                <div className=\"addLabel\">\r\n                <label>Course name: </label><input id=\"nameInput\" value={props.newCourseName} onChange={props.handleCourseName} maxLength=\"50\" required/>\r\n                </div>\r\n                <div className=\"addLabel\">\r\n                <label>Number of holes:  </label><input id=\"holeInput\" value={props.newHoleAmount} onChange={props.handleHoleAmount} type=\"number\" min=\"1\" max=\"30\" step=\"1\" required />\r\n                </div>\r\n                <button type=\"submit\" className=\"addButton\">Next</button>\r\n                <button onClick={props.resetNewCourseAdd} className=\"addButton\">Cancel</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst Scores = () => {\r\n    const [courses, setCourses] = useState([])\r\n\r\n    const [courseToShow, setCourseToShow] = useState([])\r\n    const [showAddNew, setShowAddNew] = useState(false)\r\n    const [showFirstForm, setShowFirstForm] = useState(true)\r\n    const [clickedNext, setclickedNext] = useState(false)\r\n    const [courseChosen, setCourseChosen] = useState(false)\r\n\r\n    const [score, setScore] = useState({})\r\n    const [newName, setNewName] = useState('')\r\n\r\n    const [newCourseName, setNewCourseName] = useState('')\r\n    const [newHoleAmount, setNewHoleAmount] = useState(0)\r\n    const [newCourseHoles, setNewCourseHoles] = useState({})\r\n    \r\n    const [message, setMessage] = useState(null)\r\n    let total = 0\r\n\r\n\r\n    // lähetetään axios-pyyntö MongoDB tietokantaan, haetaan tallennetut radat, asetetaan saapunut data courses - taulukkoon\r\n    useEffect(() => {\r\n        scoreService\r\n            .getAll()\r\n            .then(initialCourses => {\r\n                setCourses(initialCourses)\r\n            })\r\n    }, [])\r\n    const handleName = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const resetNewCourseAdd = () => {\r\n        setShowAddNew(false)\r\n        setShowFirstForm(true)\r\n        setclickedNext(false)\r\n        setNewCourseName('')\r\n        setNewCourseHoles(0)\r\n    }\r\n    const handleCourseName = (event) => {\r\n        setNewCourseName(event.target.value)\r\n    }\r\n    const handleHoleAmount = (event) => {\r\n        setNewHoleAmount(event.target.value)\r\n    }\r\n\r\n    // kun tuloksia syötetään lomakkeeseen, hoidetaan syötetyn tuloksen tallennus oikean rataväylän tulokseksi.\r\n    // toteutus mahdollistaa myös jo syötetyn tuloksen \"kumittamisen\" ja syöttämisen uudestaan, olio ei mene sekaisin\r\n    const handleScore = (event) => {\r\n        setScore({\r\n            ...score,\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n    const handleCourseHoles = (event) => {\r\n        setNewCourseHoles({\r\n            ...newCourseHoles,\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    //lomakkeen tallennus\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault()\r\n        let invalidInputs = false\r\n\r\n        //Tarkistetaan ettei käyttäjä ole syöttänyt muita merkkejä kuin numeroita, eikä kenttiä ole jätetty tyhjäksi\r\n        if(newName === '' || Object.keys(score).length < 1) {\r\n            invalidInputs = true\r\n        }\r\n        for(let i = 0; i < Object.keys(score).length; i++)\r\n        {\r\n            if(isNaN(parseInt(score[i])) || parseInt(score[i]) === 0 || score[i] === '')\r\n            {\r\n                invalidInputs = true\r\n            }\r\n        }\r\n\r\n        if(!invalidInputs)\r\n        {\r\n            let toPar\r\n            let scoreArray = []\r\n\r\n            for(let i = 0; i < Object.keys(score).length; i++) // lasketaan kokonaistulos, eli olion jokaisen kentän arvot lasketaan yhteen\r\n            {\r\n                total = total + parseInt(score[i])\r\n                scoreArray.push({id: i + 1, result: parseInt(score[i])})        \r\n            }\r\n            toPar = total - courseToShow.parTotal\r\n\r\n            let d = new Date()\r\n            let time = d.getDate() + '/' + d.getMonth() + 1 + '/' + d.getFullYear()\r\n            const resultObject = { // luodaan tulosolio, joka voidaan lähettää tietokantaan.\r\n                name: newName,\r\n                score: total,\r\n                toPar: toPar,\r\n                results: scoreArray,\r\n                time: time,\r\n            }\r\n\r\n            const changedCourse = courses.find(c => c.name === courseToShow.name)\r\n            changedCourse.results.push(resultObject)\r\n\r\n            setCourseToShow([]) // kun tulokset on tallennettu, ei lomaketta haluta enää näyttää käyttäjälle, joten nollataan se.\r\n            setScore({}) // nollataan myös tulokset\r\n\r\n\r\n            scoreService // lähetetään tallennettu tulosolio tietokantaan, ja tallennetaan vastauksessa sama olio tuloksiin, jotka näytetään ruudulla.\r\n                .update(changedCourse.id, changedCourse) \r\n                .then(returnedCourse => {\r\n                    setCourses(courses.map(course => course.id !== changedCourse.id ? course : returnedCourse))\r\n                    total = 0\r\n                    scoreArray = []\r\n                    setMessage('Score saved!')\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                    setCourseChosen(false)\r\n                })\r\n\r\n            \r\n        }\r\n        else // mikäli lomakkeen kenttiä jäi tyhjäksi, tai käyttäjä syötti muuta kuin numeroita, infotaan käyttäjää\r\n        {\r\n            setMessage('Inputs cannot be empty and hole results must be numbers larger than 0!')\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\r\n\r\n    const handleAddNew = () => {\r\n        setShowAddNew(true)\r\n    }\r\n    const handleNextClick = (event) => {\r\n        event.preventDefault()\r\n        setclickedNext(true)\r\n        setShowFirstForm(false)\r\n    }\r\n    \r\n    const handleAddNewFormSubmit = (event) => {\r\n        event.preventDefault()\r\n        let holesArray = []\r\n        let newCourseParTotal = 0\r\n        for(let i = 0; i < Object.keys(newCourseHoles).length; i++) \r\n        {\r\n            newCourseParTotal += parseInt(newCourseHoles[i])\r\n            holesArray.push({\r\n                id: i + 1, \r\n                par: parseInt(newCourseHoles[i])\r\n            })        \r\n        }\r\n        const newCourseObject = {\r\n            name: newCourseName,\r\n            parTotal: newCourseParTotal,\r\n            holes: holesArray,\r\n            results: []\r\n        }\r\n        scoreService\r\n            .create(newCourseObject)\r\n            .then(returnedCourse => {\r\n                setCourses(courses.concat(returnedCourse))\r\n                resetNewCourseAdd()\r\n                setMessage('New course added!')\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            })\r\n        \r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    const resetCourseToShow = () => {\r\n        setCourseToShow([])\r\n        setCourseChosen(false)\r\n        resetNewCourseAdd()\r\n    }\r\n    const handleCourseToShow = (id) => {\r\n        setCourseToShow(courses.find(course => course.id === id))\r\n        setCourseChosen(true)\r\n    }\r\n\r\n    const resultsToShow = courses.filter(course => course.results.length !== 0)\r\n\r\n    return(\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <h1>Save your round and view scores</h1>\r\n            </header>\r\n            <div>\r\n                <h2>Choose course</h2>\r\n                {courses.map(course => <button className=\"button1\" key={course.id} onClick={() => handleCourseToShow(course.id)}> {course.name} </button>)}\r\n            </div>\r\n            <div className=\"addNewCourse\">\r\n                <NewCourseForm courseChosen={courseChosen} showAddNew={showAddNew} handleAddNew={handleAddNew} newCourseName={newCourseName} newHoleAmount={newHoleAmount} \r\n                handleCourseName={handleCourseName} handleHoleAmount={handleHoleAmount} handleNextClick={handleNextClick} clickedNext={clickedNext} \r\n                handleHolePar={handleCourseHoles} handleAddNewFormSubmit={handleAddNewFormSubmit} showFirstForm={showFirstForm} resetNewCourseAdd={resetNewCourseAdd} />\r\n            </div>\r\n            <div>\r\n                <Notification message={message} />\r\n            </div>\r\n            <div>\r\n                <Form courseToShow={courseToShow} resetCourseToShow={resetCourseToShow} newName={newName} handleName={handleName} handleScore={handleScore} handleFormSubmit={handleFormSubmit} />\r\n            </div>\r\n            <div className=\"scores\">\r\n                <h2>Player Scores: </h2>\r\n                    {resultsToShow.map(course =>\r\n                        <div key={course.id}>\r\n                            <h3>{course.name}</h3>\r\n                            <div className=\"resultDiv\">\r\n                            <table className=\"resultTable\">\r\n                                <tbody>\r\n                                    <tr className=\"trow\">\r\n                                        <th id=\"cell1\">Player</th><th id=\"cell1\">Date</th><th id=\"cell2\">Hole:</th>{course.holes.map(hole => <th key={hole.id}>{hole.id}</th>)}<th>To par</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td> </td><td>  </td><td id=\"cell2\">Par: </td>{course.holes.map(hole => <td key={hole.id}>{hole.par}</td>)}<td> </td>\r\n                                    </tr>\r\n                                    {course.results.map((result, i) => \r\n                                    <tr key={i} className=\"trow\">\r\n                                        <td id=\"cell1\">{result.name}</td><td id=\"cell1\">{result.time}</td><td id=\"cell2\">Result: </td>{result.results.map(result => <td key={result.id} id=\"tdresult\">{result.result}</td>)}<td> {result.toPar} </td>\r\n                                    </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n            </div>\r\n            <div id=\"Footer\">\r\n                <p>Courses and results are saved to MongoDB Atlas</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Scores;","\r\nimport React from 'react';\r\nimport '../App.css'\r\n\r\nconst Links = () => {\r\n\r\n    return(\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <h1>Links for disc golfers</h1>\r\n            </header>\r\n            <div className=\"buydiscs\">\r\n                <h2>Buy discs, bags and other accessories</h2>\r\n                <a id=\"link\" href=\"https://www.powergrip.fi\">Powergrip</a><br></br>\r\n                <a id=\"link\" href=\"https://www.innovastore.fi\">InnovaStore</a><br></br>\r\n                <a id=\"link\" href=\"https://www.frisbeemarket.com\">Frisbeemarket</a><br></br>\r\n                <a id=\"link\" href=\"https://nbdg.fi/fi\">NBDG</a>\r\n            </div>\r\n            <div className=\"watchdg\">\r\n                <h2>Watch disc golf on Youtube</h2>\r\n                <a id=\"link\" href=\"https://www.youtube.com/channel/UC59Yn1FzyDWGpGARcV7G_fw\">Disc Golf Finland</a><br></br>\r\n                <a id=\"link\" href=\"https://www.youtube.com/channel/UCsrmSG6MHhU7aAwsq-ZhY8g\">NBDG</a><br></br>\r\n                <a id=\"link\" href=\"https://www.youtube.com/channel/UCmGyCEbHfY91NFwHgioNLMQ\">JomezPro</a>\r\n            </div>\r\n            <div className=\"findcomps\">\r\n                <h2>Find competitions and players</h2>\r\n                <a id=\"link\" href=\"https://www.pdga.com\">PDGA</a><br></br>\r\n                <a id=\"link\" href=\"https://discgolfmetrix.com/\">Metrix Suomi</a>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Links;","import {\n  BrowserRouter as Router,\n  Switch, Route, Link\n} from \"react-router-dom\"\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Home from './components/home'\nimport Courses from './components/courses'\nimport Scores from './components/scores'\nimport Links from './components/links'\nimport './App.css';\n\nconst App = () => {\n\n  const [courses, setCourses] = useState([])\n  const [filter, setFilter] = useState('')\n  const [responseData, setResponseData] = useState({})\n  \n  // haetaan suomen ratojen tiedot METRIX API:sta \n  useEffect(() => {\n    axios.get('https://discgolfmetrix.com/api.php?content=courses_list&country_code=FI')\n      .then(response => {\n        setResponseData(response.data) \n      })\n  }, [])\n\n  // ratojen suodatus kaupungin mukaan\n  const handleFilter = (event) => {\n    setFilter(event.target.value)\n  }\n\n  // suodatetaan API:sta haetut ratojen tiedot siten, että saman radan eri versiota toistuu mahd. vähän (type === \"1\")\n  // ja asetetaan ehto että radan tietojen kenttä City ei voi olla null, sillä ratoja filtteröidään tämän arvon perusteella.\n  const handleCourses = () => {\n    if(courses.length === 0)\n    {\n      setCourses(responseData.courses.filter(course => course.Type === \"1\" && course.City !== null))\n    }\n  }\n\n  return (\n    <Router> \n      <div className=\"App\"> \n        <div className=\"Navigation\">\n            <Link className=\"button\" to=\"/\">Home</Link>\n            <Link className=\"button\" to=\"/courses\" onClick={handleCourses}>Browse courses in Finland</Link>\n            <Link className=\"button\" to=\"/scores\">Save your rounds </Link>\n            <Link className=\"button\" to=\"/links\">Disc Golf Stuff</Link>\n        </div>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/courses\">\n              <Courses courses={courses} filter={filter.toLowerCase()} handleFilter={handleFilter} />\n            </Route>\n            <Route path=\"/scores\">\n              <Scores />\n            </Route>\n            <Route path=\"/links\">\n              <Links />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}